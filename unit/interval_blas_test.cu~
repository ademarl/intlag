


#ifndef INTERVAL_BLAS_TEST
#define INTERVAL_BLAS_TEST

#include "stdio.h"
#include "gtest/gtest.h"

#include "interval_blas.h"

using namespace intlag;

class IntervalBlasTest : public ::testing::Test{

	protected:

	virtual void SetUp() {
		x[0] = interval_gpu<double>(1.1, 2.2);
		x[1] = interval_gpu<double>(3.3, 4.4);
		x[2] = interval_gpu<double>(5.5, 6.6);

		y[0] = interval_gpu<double>(10.1, 20.1);
		y[1] = interval_gpu<double>(30.2, 40.2);
		y[2] = interval_gpu<double>(-500.0, -300.0);

		a = interval_gpu<double>(3.0, 5.0);
		b = interval_gpu<double>(33.0, 55.0);
		c = interval_gpu<double>(-7.7, 8.8);

	}

	virtual void TearDown() { }

	interval_gpu<double> x[3], y[3], z[3];
	interval_gpu<double> a, b, c, r;
};

TEST_F(IntervalBlasTest, ACopy) {

	bool ret = acopy(3, x, z);
	EXPECT_TRUE(ret);
	x[0] = interval_gpu<double>(42.0, 42.0);
	EXPECT_DOUBLE_EQ(1.1, z[0].lower());
	EXPECT_DOUBLE_EQ(3.3, z[1].lower());
	EXPECT_DOUBLE_EQ(5.5, z[2].lower());
	EXPECT_DOUBLE_EQ(2.2, z[0].upper());
	EXPECT_DOUBLE_EQ(4.4, z[1].upper());
	EXPECT_DOUBLE_EQ(6.6, z[2].upper());

}


TEST_F(IntervalBlasTest, Swap) {

	bool ret = swap(3, x, y);
	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(1.1, y[0].lower());
	EXPECT_DOUBLE_EQ(3.3, y[1].lower());
	EXPECT_DOUBLE_EQ(5.5, y[2].lower());
	EXPECT_DOUBLE_EQ(2.2, y[0].upper());
	EXPECT_DOUBLE_EQ(4.4, y[1].upper());
	EXPECT_DOUBLE_EQ(6.6, y[2].upper());

	EXPECT_DOUBLE_EQ(10.1, x[0].lower());
	EXPECT_DOUBLE_EQ(30.2, x[1].lower());
	EXPECT_DOUBLE_EQ(-500.0, x[2].lower());
	EXPECT_DOUBLE_EQ(20.1, x[0].upper());
	EXPECT_DOUBLE_EQ(40.2, x[1].upper());
	EXPECT_DOUBLE_EQ(-300.0, x[2].upper());
}


TEST_F(IntervalBlasTest, Scal) {

	bool ret = scal(3, (double)2, x);
	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(2*1.1, x[0].lower());
	EXPECT_DOUBLE_EQ(2*3.3, x[1].lower());
	EXPECT_DOUBLE_EQ(2*5.5, x[2].lower());
	EXPECT_DOUBLE_EQ(2*2.2, x[0].upper());
	EXPECT_DOUBLE_EQ(2*4.4, x[1].upper());
	EXPECT_DOUBLE_EQ(2*6.6, x[2].upper());
}


TEST_F(IntervalBlasTest, AXPY) {

	bool ret = axpy(3, 2, x, y);
	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(2*1.1+10.1, y[0].lower());
	EXPECT_DOUBLE_EQ(2*3.3+30.2, y[1].lower());
	EXPECT_DOUBLE_EQ(2*5.5-500, y[2].lower());
	EXPECT_DOUBLE_EQ(2*2.2+20.1, y[0].upper());
	EXPECT_DOUBLE_EQ(2*4.4+40.2, y[1].upper());
	EXPECT_DOUBLE_EQ(2*6.6-300, y[2].upper());
}


TEST_F(IntervalBlasTest, ASum) {

	bool ret = asum(&r, 3, x);
	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(9.9, r.lower());
	EXPECT_DOUBLE_EQ(13.2, r.upper());
}


TEST_F(IntervalBlasTest, Dot) {

	bool ret = dot(&r, 3, x, y);
	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(0, r.lower());
	EXPECT_DOUBLE_EQ(2.2*20.1 + 4.4*40.2 + 500*6.6, r.upper());
}


TEST_F(IntervalBlasTest, Norm2) {

	bool ret = norm2(&r, 3, x);
	EXPECT_TRUE(ret);
	EXPECT_NEAR(0, r.lower(), 0.001);
	EXPECT_NEAR(8.23164, r.upper(), 0.001);
}


TEST_F(IntervalBlasTest, Gemv) {

	interval_gpu<double> A[4] = { interval_gpu<double>(1.0), interval_gpu<double>(1.0), interval_gpu<double>(2.0), interval_gpu<double>(4.0) };
	interval_gpu<double> a[2] = { interval_gpu<double>(1.0, 2.0), interval_gpu<double>(3.0, 4.0) };
	interval_gpu<double> b[2] = { interval_gpu<double>(1.0, 2.0), interval_gpu<double>(3.0, 4.0) };

	bool ret = gemv(2, 2, (double) 3.0, (double) -2.0, A, a, b);

	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(8.0, b[0].lower());
	EXPECT_DOUBLE_EQ(16.0, b[0].upper());
	EXPECT_DOUBLE_EQ(34.0, b[1].lower());
	EXPECT_DOUBLE_EQ(54.0, b[1].upper());
}


TEST_F(IntervalBlasTest, Gemm) {

	interval_gpu<double> A[4] = { interval_gpu<double>(1.0), interval_gpu<double>(1.0), interval_gpu<double>(2.0), interval_gpu<double>(4.0) };
	interval_gpu<double> B[2] = { interval_gpu<double>(1.0, 2.0), interval_gpu<double>(3.0, 4.0) };
	interval_gpu<double> C[2] = { interval_gpu<double>(1.0, 2.0), interval_gpu<double>(3.0, 4.0) };

	bool ret = gemm(2, 2, 1, 3, -2, A, B, C);

	EXPECT_TRUE(ret);
	EXPECT_DOUBLE_EQ(8.0, C[0].lower());
	EXPECT_DOUBLE_EQ(16.0, C[0].upper());
	EXPECT_DOUBLE_EQ(34.0, C[1].lower());
	EXPECT_DOUBLE_EQ(54.0, C[1].upper());
}


#endif
