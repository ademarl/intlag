
//------------------------------------------------------------------------------
// Copyright (c) 2014 Ademar Lacerda
//
// This Source Code Form is subject to the terms of the Mozilla Public
// License, v. 2.0. If a copy of the MPL was not distributed with this
// file, You can obtain one at http://mozilla.org/MPL/2.0/.
//------------------------------------------------------------------------------


#include <ctime>
#include <map>
#include <string>
#include <cstdlib>
#include <iostream>
#include <fstream>

#include "gtest/gtest.h"

#include "aux/reference.h"

#define REPETITIONS 1
#define ARRAY_LENGTH 1024*1024

std::map<std::string, double> timings;


int main(int argc, char **argv) {

  int t = time(NULL);
  timings.clear();

  std::ofstream outs("benchmark.txt", std::fstream::trunc);
  outs << std::endl << "=======================================================\
===============" << std::endl << std::endl;
  outs << "IntLAG Benchmark" << std::endl << std::endl;
  outs << "Number of repetitions: " << REPETITIONS << std::endl;
  outs << "Largest Array Size: " << ARRAY_LENGTH << std::endl;
  outs << "Random Seed: " << t << std::endl << std::endl;
  outs.close();

  srand(t);
  intlag::bench::Reference::setValues(argc, argv, ARRAY_LENGTH);

  ::testing::InitGoogleTest(&argc, argv);

  int r;
  for(int i = 0; i < REPETITIONS; i++)
    r = RUN_ALL_TESTS();

  //print hashtable
  for (std::map<std::string, double>::iterator it=timings.begin(); it!=timings.end(); ++it) {
    std::ofstream outs("benchmark.txt", std::fstream::app);
    outs << it->first << ": " << (it->second)/REPETITIONS << " seconds." << std::endl;
    outs.flush();
    outs.close();
  }
  std::ofstream outs2("benchmark.txt", std::fstream::app);
  outs2 << std::endl << "======================================================\
================" << std::endl << std::endl;
  outs.close();

  int r2 = system("cat benchmark.txt");

  return r;
}



